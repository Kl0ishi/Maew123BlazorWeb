@page "/forgot-password"
@page "/forgot-password/otp/{AlreadySent}"
@inject IAuthenticationService AuthService
@inject SweetAlertService Swal
@inject NavigationManager navigationManager

@if (!HasOTP)
{
    <form @onsubmit="() => SendMail(email)">
        <div class="Centering" style="height:60vh;">
            <div class="box-centerside">
                <div class="ContentInfo">
                    <h3>Forgot Password ลืมรหัสผ่าน</h3>
                    <div style="font-size: 16px">ให้ทำการกรอก Email ที่ใช้ในการสมัครสมาชิก <span>ทางเราจะส่ง OTP เพื่อให้ท่านยืนยันตัวตน</span></div>
                    <div class="d-flex" style="width:100%">
                        <input type="email" @bind="email" class="form-control mr-2" placeholder="Enter your email" required>
                        <button class="btn btn-primary" type="submit">Submit</button>
                    </div>
                    @if (Isloading)
                    {
                        <DisplaySpinner />
                    }
                </div>
            </div>
        </div>

    </form>
}
else
{
    <form @onsubmit="() => VerifyOtp(otpCode)">
        <div class="Centering" style="height:60vh;">
            <div class="box-centerside">
                <div class="ContentInfo">
                    <h3>Verify OTP</h3>

                    <div class="d-flex justify-content-center align-items-center" style="width:100%">
                        <input type="text" @bind="otpCode" style="width: 75%" class="form-control mr-2" placeholder="Enter OTP code" required>
                        <button class="btn btn-success" style="width:20%" type="submit">Verify OTP</button>
                    </div>
                </div>
            </div>
        </div>
    </form>
}



@code {

    private string email = string.Empty;
    private string otpCode = string.Empty;
    private bool HasOTP { get; set; }
    [Parameter] public string? AlreadySent { get; set; }
    private int count = 0;
    private bool Isloading = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if OTP exists in session storage
        HasOTP = await AuthService.HasOTP();
    }

    protected override async Task OnParametersSetAsync()
    {
        HasOTP = await AuthService.HasOTP();
    }

    private async Task SendMail(string email)
    {
        Isloading = true;
        var result = await AuthService.ForgotPassword(email);
        if (result.Success)
        {
            Isloading = false;
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = "warning",
                    Title = $"{result.Message}",
                    ShowConfirmButton = false,
                    Timer = 3000
                }
            );
            navigationManager.NavigateTo($"forgot-password/otp/1");
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = "warning",
                    Title = $"{result.Message}",
                    ShowConfirmButton = false,
                    Timer = 3000
                }
            );
        }

    }

    private async Task VerifyOtp(string otpCode)
    {
        var result = await AuthService.VerifyOtp(otpCode, count);
        if (result.Success)
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = "info",
                    Title = $"{result.Message}",
                    ShowConfirmButton = false,
                });
            navigationManager.NavigateTo("Login");
        }
        else
        {
            await Swal.FireAsync(new SweetAlertOptions
                {
                    Icon = "warning",
                    Title = $"{result.Message}",
                    ShowConfirmButton = false,
                    Timer = 5000
                });
            if (count > 3)
                navigationManager.NavigateTo("/");
        }
        count += count + 1;
    }
}
