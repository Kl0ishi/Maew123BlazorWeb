export declare const logger: {
    _print(prefix: string | null, data: string): void;
    _traverseObjectProperties(o: any, fn: (_prop: string, _value: any, _indent: string) => void, indent?: string): void;
    info(data: string | object, prefix?: string | null): void;
    log(data: string | object): void;
    error(data: string | object, exit?: boolean): void;
    silly(data: string | object, prefix?: string | null, debugFilter?: DebugFilterLevel): void;
};
export declare const response: ({ status, headers, cookies, body }: ResponseOptions) => {
    status: number;
    cookies: any;
    headers: any;
    body: any;
};
export declare const validateCookie: (cookieValue: string) => boolean;
export declare const serializeCookie: (cookieName: string, cookieValue: string, options: any) => string;
export declare type SwaProviders = "aad" | "github" | "twitter" | "facebook" | "google";
export declare const decodeCookie: (cookieValue: any) => ClientPrincipal | null;
export declare function validateUserConfig(userConfig: Partial<GithubActionWorkflow> | undefined): Partial<GithubActionWorkflow> | undefined;
export declare const readWorkflowFile: ({ userConfig }?: {
    userConfig?: Partial<GithubActionWorkflow> | undefined;
}) => Partial<GithubActionWorkflow> | undefined;
/**
 * Parse process.argv and retrieve a specific flag value.
 * Usage:
 * ```
 * // ./server --port 4242
 * let port = argv<number>('--port');
 * ```
 *
 * @param flag the flag name to retrieve from argv, e.g.: --port
 * @returns {T} the value of the corresponding flag:
 * - if flag is --key=value or --key value, returns value as type `T`.
 * - if flag is --key, return a boolean (true if the flag is present, false if not).
 * - if flag is not present, return null.
 *
 */
export declare function argv<T extends string | number | boolean | null>(flag: string): T;
export declare function isAcceptingTcpConnections({ host, port }: {
    host?: string;
    port: number;
}): Promise<boolean>;
export declare function isHttpUrl(input: string): boolean;
export declare function validateDevServerConfig(context: string): Promise<string>;
export declare function parseUrl(url: string): {
    protocol: string;
    port: number;
    host: string;
    hostname: string;
};
export declare function computeAppLocationFromArtifactLocation(appArtifactLocation: string | undefined): string | undefined;
export declare function parsePort(port: string): number;
export declare function traverseFolder(folder: string): AsyncGenerator<string>;
export declare function findSWAConfigFile(folder: string): Promise<{
    file: string;
    isLegacyConfigFile: boolean;
} | null | undefined>;
export declare const address: (host: string, port: number | string | undefined) => string;
export declare const registerProcessExit: (fn: Function) => void;
//# sourceMappingURL=utils.d.ts.map