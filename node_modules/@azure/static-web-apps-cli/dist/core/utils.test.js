"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const mock_fs_1 = __importDefault(require("mock-fs"));
const path_1 = __importDefault(require("path"));
const utils_1 = require("./utils");
describe("Utils", () => {
    const mockLoggerError = jest.spyOn(utils_1.logger, "error").mockImplementation(() => {
        return undefined;
    });
    beforeEach(() => {
        process.env.SWA_CLI_DEBUG = "";
        process.argv = [];
    });
    afterEach(() => {
        mock_fs_1.default.restore();
    });
    describe("argv()", () => {
        it("process.argv = []", () => {
            process.argv = [];
            expect(utils_1.argv("--port")).toBe(null);
        });
        it("process.argv = ['--port']", () => {
            process.argv = ["--port"];
            expect(utils_1.argv("--port")).toBe(true);
            expect(utils_1.argv("--portxyz")).toBe(false);
        });
        it("process.argv = ['--port=4242']", () => {
            process.argv = ["--port=4242"];
            expect(utils_1.argv("--port")).toBe("4242");
        });
        it("process.argv = ['--port  =   4242  ']", () => {
            process.argv = ["--port  =  4242  "];
            expect(utils_1.argv("--port")).toBe("4242");
        });
        it("process.argv = ['--port', '4242']", () => {
            process.argv = ["--port", "4242"];
            expect(utils_1.argv("--port")).toBe("4242");
        });
        it("process.argv = ['--port', '--other']", () => {
            process.argv = ["--port", "--other"];
            expect(utils_1.argv("--port")).toBe(true);
        });
        it("process.argv = ['--port=']", () => {
            process.argv = ["--port="];
            expect(utils_1.argv("--port")).toBe(null);
        });
    });
    describe("response()", () => {
        it("context = null", () => {
            expect(() => {
                utils_1.response({
                    context: null,
                });
            }).toThrow();
        });
        it("context.bindingData = {foo:bar}", () => {
            expect(utils_1.response({
                status: 200,
                context: {
                    bindingData: {
                        foo: "bar",
                    },
                },
            })).toEqual({
                body: null,
                cookies: undefined,
                headers: { "Content-Type": "application/json", status: 200 },
                status: 200,
            });
        });
        it("status = null", () => {
            expect(() => {
                utils_1.response({
                    context: {
                        bindingData: {},
                    },
                    status: null,
                });
            }).toThrow(/TypeError/);
        });
        it("status = 200", () => {
            const res = utils_1.response({
                context: {
                    bindingData: {},
                },
                status: 200,
            });
            expect(res.status).toBe(200);
            expect(res.headers.status).toBe(200);
        });
        it("body = null", () => {
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                body: null,
            });
            expect(res.body).toBe(null);
        });
        it("body = {foo:bar}", () => {
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                body: {
                    foo: "bar",
                },
            });
            expect(typeof res.body).toBe("object");
            expect(res.body.foo).toBeDefined();
            expect(res.body.foo).toBe("bar");
        });
        it("body = {foo:bar} (DEBUG on)", () => {
            process.env.SWA_CLI_DEBUG = "*";
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                body: {
                    foo: "bar",
                },
            });
            expect(typeof res.body).toBe("object");
            expect(res.body.foo).toBeDefined();
            expect(res.body.foo).toBe("bar");
        });
        it("headers = null", () => {
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                headers: null,
            });
            expect(res.headers).toBeDefined();
            expect(res.headers.status).toBe(200);
            expect(res.headers["Content-Type"]).toBe("application/json");
        });
        it("headers = null (DEBUG on)", () => {
            process.env.SWA_CLI_DEBUG = "*";
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                headers: null,
            });
            expect(res.headers).toBeDefined();
            expect(res.headers.status).toBe(200);
            expect(res.headers["Content-Type"]).toBe("application/json");
        });
        it("headers = { foo: bar }", () => {
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                headers: {
                    foo: "bar",
                },
            });
            expect(res.headers).toBeDefined();
            expect(res.headers.foo).toBe("bar");
            expect(res.headers.status).toBe(200);
            expect(res.headers["Content-Type"]).toBe("application/json");
        });
        it("headers = { foo: bar } (DEBUG on)", () => {
            process.env.SWA_CLI_DEBUG = "*";
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                headers: {
                    foo: "bar",
                },
            });
            expect(res.headers).toBeDefined();
            expect(res.headers.foo).toBe("bar");
            expect(res.headers.status).toBe(200);
            expect(res.headers["Content-Type"]).toBe("application/json");
        });
        it("headers = { location: null }", () => {
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                headers: {
                    location: null,
                },
            });
            expect(res.headers).toBeDefined();
            expect(res.headers.location).toBe(null);
            expect(res.headers.status).toBe(200);
            expect(res.headers["Content-Type"]).toBe("application/json");
        });
        it("headers = { location: null } (DEBUG on)", () => {
            process.env.SWA_CLI_DEBUG = "*";
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                headers: {
                    location: null,
                },
            });
            expect(res.headers).toBeDefined();
            expect(res.headers.location).toBe(null);
            expect(res.headers.status).toBe(200);
            expect(res.headers["Content-Type"]).toBe("application/json");
        });
        it("headers = { location: 'wassim.dev' }", () => {
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                headers: {
                    location: "wassim.dev",
                },
            });
            expect(res.headers).toBeDefined();
            expect(res.headers.location).toBe("wassim.dev");
            expect(res.headers.status).toBe(200);
            expect(res.headers["Content-Type"]).toBe("application/json");
        });
        it("cookies = null", () => {
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                cookies: null,
            });
            expect(res.cookies).toBe(null);
        });
        it("cookies = { foo:bar }", () => {
            const res = utils_1.response({
                status: 200,
                context: {
                    bindingData: {},
                },
                cookies: {
                    foo: "bar",
                },
            });
            expect(res.cookies).toBeDefined();
            expect(res.cookies.foo).toBe("bar");
        });
    });
    describe("validateCookie()", () => {
        it("cookies = ''", () => {
            expect(utils_1.validateCookie("")).toBe(false);
        });
        it("cookies = 'abc'", () => {
            expect(utils_1.validateCookie("")).toBe(false);
        });
        it("cookies = 'foo=bar'", () => {
            expect(utils_1.validateCookie("foo=bar")).toBe(false);
        });
    });
    describe("readWorkflowFile()", () => {
        it("config file not found should return undefined", () => {
            expect(utils_1.readWorkflowFile()).toBe(undefined);
        });
        it("config file with wrong filename should return undefined", () => {
            mock_fs_1.default({
                ".github/workflows/wrong-file-name-pattern.yml": "",
            });
            expect(utils_1.readWorkflowFile()).toBe(undefined);
        });
        it("invalid YAML file should throw", () => {
            mock_fs_1.default({
                ".github/workflows/azure-static-web-apps__not-valid.yml": "",
            });
            expect(() => utils_1.readWorkflowFile()).toThrow(/could not parse the SWA workflow file/);
        });
        describe("checking workflow properties", () => {
            it("missing property 'jobs' should throw", () => {
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps__not-valid.yml": `name: Azure Static Web Apps CI/CD`,
                });
                expect(() => utils_1.readWorkflowFile()).toThrow(/missing property 'jobs'/);
            });
            it("missing property 'jobs.build_and_deploy_job' should throw", () => {
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  invalid_property:
`,
                });
                expect(() => utils_1.readWorkflowFile()).toThrow(/missing property 'jobs.build_and_deploy_job'/);
            });
            it("missing property 'jobs.build_and_deploy_job.steps' should throw", () => {
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    invalid_property:
`,
                });
                expect(() => utils_1.readWorkflowFile()).toThrow(/missing property 'jobs.build_and_deploy_job.steps'/);
            });
            it("invalid property 'jobs.build_and_deploy_job.steps' should throw", () => {
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
`,
                });
                expect(() => utils_1.readWorkflowFile()).toThrow(/missing property 'jobs.build_and_deploy_job.steps'/);
            });
            it("invalid property 'jobs.build_and_deploy_job.steps[]' should throw", () => {
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
`,
                });
                expect(() => utils_1.readWorkflowFile()).toThrow(/invalid property 'jobs.build_and_deploy_job.steps\[\]'/);
            });
            it("missing property 'jobs.build_and_deploy_job.steps[].with' should throw", () => {
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
        uses: Azure/static-web-apps-deploy@v0.0.1-preview
`,
                });
                expect(() => utils_1.readWorkflowFile()).toThrow(/missing property 'jobs.build_and_deploy_job.steps\[\].with'/);
            });
        });
        describe("checking SWA properties", () => {
            it("property 'app_location' should be set", () => {
                var _a;
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
        uses: Azure/static-web-apps-deploy@v0.0.1-preview
        with:
          app_location: "/"
`,
                });
                expect(utils_1.readWorkflowFile()).toBeTruthy();
                expect((_a = utils_1.readWorkflowFile()) === null || _a === void 0 ? void 0 : _a.appLocation).toBe(path_1.default.normalize(process.cwd() + "/"));
            });
            it("property 'app_location' should be set to '/' if missing", () => {
                var _a;
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
        uses: Azure/static-web-apps-deploy@v0.0.1-preview
        with:
          foo: bar
`,
                });
                expect(utils_1.readWorkflowFile()).toBeTruthy();
                expect((_a = utils_1.readWorkflowFile()) === null || _a === void 0 ? void 0 : _a.appLocation).toBe(path_1.default.normalize(process.cwd() + "/"));
            });
            it("property 'api_location' should be set", () => {
                var _a;
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
        uses: Azure/static-web-apps-deploy@v0.0.1-preview
        with:
          api_location: "/api"
`,
                });
                expect(utils_1.readWorkflowFile()).toBeTruthy();
                expect((_a = utils_1.readWorkflowFile()) === null || _a === void 0 ? void 0 : _a.apiLocation).toBe(path_1.default.normalize(process.cwd() + "/api"));
            });
            it("property 'api_location' should be undefined if missing", () => {
                var _a;
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
        uses: Azure/static-web-apps-deploy@v0.0.1-preview
        with:
          foo: bar
`,
                });
                expect(utils_1.readWorkflowFile()).toBeTruthy();
                expect((_a = utils_1.readWorkflowFile()) === null || _a === void 0 ? void 0 : _a.apiLocation).toBeUndefined();
            });
            it("property 'app_artifact_location' should be set", () => {
                var _a;
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
        uses: Azure/static-web-apps-deploy@v0.0.1-preview
        with:
          app_artifact_location: "/"
`,
                });
                expect(utils_1.readWorkflowFile()).toBeTruthy();
                expect((_a = utils_1.readWorkflowFile()) === null || _a === void 0 ? void 0 : _a.appArtifactLocation).toBe(path_1.default.normalize(process.cwd() + "/"));
            });
            it("property 'app_artifact_location' should be set to '/' if missing", () => {
                var _a;
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
        uses: Azure/static-web-apps-deploy@v0.0.1-preview
        with:
          foo: bar
`,
                });
                expect(utils_1.readWorkflowFile()).toBeTruthy();
                expect((_a = utils_1.readWorkflowFile()) === null || _a === void 0 ? void 0 : _a.appArtifactLocation).toBe(path_1.default.normalize(process.cwd() + "/"));
            });
            it("property 'app_build_command' should be set", () => {
                var _a;
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
        uses: Azure/static-web-apps-deploy@v0.0.1-preview
        with:
          app_build_command: "echo test"
`,
                });
                expect(utils_1.readWorkflowFile()).toBeTruthy();
                expect((_a = utils_1.readWorkflowFile()) === null || _a === void 0 ? void 0 : _a.appBuildCommand).toBe("echo test");
            });
            it("property 'app_build_command' should be set to default if missing", () => {
                var _a;
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
        uses: Azure/static-web-apps-deploy@v0.0.1-preview
        with:
          foo: bar
`,
                });
                expect(utils_1.readWorkflowFile()).toBeTruthy();
                expect((_a = utils_1.readWorkflowFile()) === null || _a === void 0 ? void 0 : _a.appBuildCommand).toBe("npm run build --if-present");
            });
            it("property 'api_build_command' should be set", () => {
                var _a;
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
        uses: Azure/static-web-apps-deploy@v0.0.1-preview
        with:
          api_build_command: "echo test"
`,
                });
                expect(utils_1.readWorkflowFile()).toBeTruthy();
                expect((_a = utils_1.readWorkflowFile()) === null || _a === void 0 ? void 0 : _a.apiBuildCommand).toBe("echo test");
            });
            it("property 'api_build_command' should be set to default if missing", () => {
                var _a;
                mock_fs_1.default({
                    ".github/workflows/azure-static-web-apps.yml": `
jobs:
  build_and_deploy_job:
    steps:
      - name: Build And Deploy
        uses: Azure/static-web-apps-deploy@v0.0.1-preview
        with:
          foo: bar
`,
                });
                expect(utils_1.readWorkflowFile()).toBeTruthy();
                expect((_a = utils_1.readWorkflowFile()) === null || _a === void 0 ? void 0 : _a.apiBuildCommand).toBe("npm run build --if-present");
            });
        });
    });
    describe("parsePort()", () => {
        it("Ports below 1024 should be invalid", () => {
            utils_1.parsePort("0");
            expect(mockLoggerError).toBeCalled();
        });
        it("Ports above 49151 should be invalid", () => {
            utils_1.parsePort("98765");
            expect(mockLoggerError).toBeCalled();
        });
        it("Non-number ports should be invalid", () => {
            utils_1.parsePort("not a number");
            expect(mockLoggerError).toBeCalled();
        });
        it("Ports between 1024 - 49151 should be valid", () => {
            const port = utils_1.parsePort("1984");
            expect(port).toBe(1984);
        });
    });
    describe("traverseFolder()", () => {
        const asyncGeneratorToArray = async (gen) => {
            const entries = [];
            for await (const entry of gen) {
                entries.push(entry);
            }
            return entries;
        };
        it("should handle empty folders", async () => {
            mock_fs_1.default();
            const entry = await asyncGeneratorToArray(utils_1.traverseFolder("."));
            expect(entry).toEqual([]);
        });
        describe("should handle flat folder", async () => {
            it("with single entry", async () => {
                mock_fs_1.default({
                    "foo.txt": "fake content",
                });
                const entries = await asyncGeneratorToArray(utils_1.traverseFolder("."));
                expect(entries.length).toBe(1);
                // entries are populated indeterminately because of async generator
                expect(entries.find((entry) => entry.endsWith("foo.txt"))).toEndWith("foo.txt");
            });
            it("with multiple entries", async () => {
                mock_fs_1.default({
                    "foo.txt": "fake content",
                    "bar.jpg": "fake content",
                });
                const entries = await asyncGeneratorToArray(utils_1.traverseFolder("."));
                expect(entries.length).toBe(2);
                // entries are populated indeterminately because of async generator
                expect(entries.find((entry) => entry.endsWith("bar.jpg"))).toEndWith("bar.jpg");
                expect(entries.find((entry) => entry.endsWith("foo.txt"))).toEndWith("foo.txt");
            });
        });
        describe("should handle deep folders", async () => {
            it("with single entry", async () => {
                mock_fs_1.default({
                    swa: {
                        "foo.txt": "fake content",
                    },
                });
                const entries = await asyncGeneratorToArray(utils_1.traverseFolder("."));
                expect(entries.length).toBe(1);
                // entries are populated indeterminately because of async generator
                expect(entries.find((entry) => entry.endsWith(`swa${path_1.default.sep}foo.txt`))).toEndWith(`swa${path_1.default.sep}foo.txt`);
            });
            it("with multiple entries", async () => {
                mock_fs_1.default({
                    swa: {
                        "foo.txt": "fake content",
                    },
                    "bar.jpg": "fake content",
                });
                const entries = await asyncGeneratorToArray(utils_1.traverseFolder("."));
                expect(entries.length).toBe(2);
                // entries are populated indeterminately because of async generator
                expect(entries.find((entry) => entry.endsWith("bar.jpg"))).toEndWith("bar.jpg");
                expect(entries.find((entry) => entry.endsWith(`swa${path_1.default.sep}foo.txt`))).toEndWith(`swa${path_1.default.sep}foo.txt`);
            });
        });
        describe("should exclude folders", async () => {
            it("node_modules", async () => {
                mock_fs_1.default({
                    "foo.txt": "fake content",
                    swa: {
                        "bar.jpg": "fake content",
                    },
                    node_modules: {
                        "bar.txt": "fake content",
                    },
                });
                const entries = await asyncGeneratorToArray(utils_1.traverseFolder("."));
                expect(entries.length).toBe(2);
                // entries are populated indeterminately because of async generator
                expect(entries.find((entry) => entry.endsWith(`swa${path_1.default.sep}bar.jpg`))).toEndWith(`swa${path_1.default.sep}bar.jpg`);
                expect(entries.find((entry) => entry.endsWith("foo.txt"))).toEndWith("foo.txt");
            });
        });
    });
    describe("findSWAConfigFile()", () => {
        it("should find no config file", async () => {
            mock_fs_1.default({});
            const file = await utils_1.findSWAConfigFile(".");
            expect(file).toBe(null);
        });
        it("should find staticwebapp.config.json (at the root)", async () => {
            mock_fs_1.default({
                "staticwebapp.config.json": `{ "routes": []}`,
            });
            const config = await utils_1.findSWAConfigFile(".");
            expect(config === null || config === void 0 ? void 0 : config.file).toContain("staticwebapp.config.json");
        });
        it("should find staticwebapp.config.json (recursively)", async () => {
            mock_fs_1.default({
                s: {
                    w: {
                        a: {
                            "staticwebapp.config.json": `{ "routes": []}`,
                        },
                    },
                },
            });
            const config = await utils_1.findSWAConfigFile(".");
            expect(config === null || config === void 0 ? void 0 : config.file).toContain("staticwebapp.config.json");
        });
        it("should find routes.json (at the root)", async () => {
            mock_fs_1.default({
                "routes.json": `{ "routes": []}`,
            });
            const config = await utils_1.findSWAConfigFile(".");
            expect(config === null || config === void 0 ? void 0 : config.file).toContain("routes.json");
        });
        it("should find routes.json (recursively)", async () => {
            mock_fs_1.default({
                s: {
                    w: {
                        a: {
                            "routes.json": `{ "routes": []}`,
                        },
                    },
                },
            });
            const config = await utils_1.findSWAConfigFile(".");
            expect(config === null || config === void 0 ? void 0 : config.file).toContain("routes.json");
        });
        it("should ignore routes.json if a staticwebapp.config.json exists", async () => {
            mock_fs_1.default({
                s: {
                    w: {
                        "staticwebapp.config.json": `{ "routes": []}`,
                        a: {
                            "routes.json": `{ "routes": []}`,
                        },
                    },
                },
            });
            const config = await utils_1.findSWAConfigFile(".");
            expect(config === null || config === void 0 ? void 0 : config.file).toContain("staticwebapp.config.json");
        });
    });
    describe("address()", () => {
        it("should throw for malformed URI", () => {
            expect(() => utils_1.address("", undefined)).toThrowError(/is not set/);
            expect(() => utils_1.address("", 80)).toThrowError(/is not set/);
            expect(() => utils_1.address("¬˚˜∆˙¨√√†®ç†®∂œƒçƒ∂ß®´ß`®´£¢´®¨¥†øˆ¨ø(*&*ˆ%&ˆ%$#%@!", 80)).toThrowError(/malformed/);
            expect(() => utils_1.address("123.45.43.56234", undefined)).toThrowError(/malformed/);
        });
        it("should handle valid URIs", () => {
            expect(utils_1.address("foo", undefined)).toBe("http://foo");
            expect(utils_1.address("foo.com", undefined)).toBe("http://foo.com");
            expect(utils_1.address("foo.com", 80)).toBe("http://foo.com:80");
            expect(utils_1.address("foo.bar.com", 80)).toBe("http://foo.bar.com:80");
            expect(utils_1.address("foo.com", "4200")).toBe("http://foo.com:4200");
            expect(utils_1.address("127.0.0.1", "4200")).toBe("http://127.0.0.1:4200");
            expect(utils_1.address("127.0.0.1", "4200")).toBe("http://127.0.0.1:4200");
            expect(utils_1.address("[::1]", "4200")).toBe("http://[::1]:4200");
        });
    });
});
//# sourceMappingURL=utils.test.js.map