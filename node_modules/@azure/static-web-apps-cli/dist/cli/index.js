#!/usr/bin/env node
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const args = process.argv.slice(2);
process.title = ["swa", ...args].join(" ");
const commander_1 = __importDefault(require("commander"));
const path_1 = __importDefault(require("path"));
const config_1 = require("../config");
const utils_1 = require("../core/utils");
const start_1 = require("./commands/start");
(async function () {
    const cli = commander_1.default
        .name("swa")
        .usage("[options] <command>")
        .version(require("../../package.json").version, "-v, --version")
        // SWA config
        .option("--verbose [prefix]", "enable verbose output. Value are: silly,info,log,silent", "log");
    commander_1.default
        .command("start [context]")
        .description("start the emulator from a directory or bind to a dev server")
        .option("--app-location <appLocation>", "set location for the static app source code", config_1.DEFAULT_CONFIG.appLocation)
        .option("--app, --app-artifact-location <appArtifactLocation>", "set the location where static files are built for production", config_1.DEFAULT_CONFIG.appArtifactLocation)
        .option("--api, --api-location <apiLocation>", "set the API folder or Azure Functions emulator address", config_1.DEFAULT_CONFIG.apiLocation)
        // CLI config
        .option("--api-port <apiPort>", "set the API backend port", utils_1.parsePort, config_1.DEFAULT_CONFIG.apiPort)
        .option("--host <host>", "set the cli host address", config_1.DEFAULT_CONFIG.host)
        .option("--port <port>", "set the cli port", utils_1.parsePort, config_1.DEFAULT_CONFIG.port)
        .option("--build", "build the app and API before starting the emulator", false)
        .action(async (context = `.${path_1.default.sep}`, options) => {
        options = {
            ...options,
            verbose: cli.verbose,
        };
        await start_1.start(context, options);
    });
    await commander_1.default.parseAsync(process.argv);
})();
//# sourceMappingURL=index.js.map